1.Delete a node from a BST

*************************************************************************************************************************

2.Check if a binary tree is BST or not

*************************************************************************************************************************

3.Lowest Common Ancestors in BST

*************************************************************************************************************************

4. InOrder Successor of a node in BST --- O(Height of BST) 

*************************************************************************************************************************

5. Find k-th smallest element in BST (Order Statistics in BST) O(Height of BST)

*************************************************************************************************************************

6.Construct a balanced BST from array in O(n) --- find mid and make it root -- recursive for left n right 
find mid and make left child and right child

*************************************************************************************************************************

7.Add all greater values to every node in a given BST -- reverse in order traversal , 
keep adding node value and update every node with added sum --- O(n) 

*************************************************************************************************************************

8.Merge two BSTs with limited extra space -- Google interview 

*************************************************************************************************************************

9.Construct BST from given pre order traversal -- 	iterative
1. Create an empty stack.

2. Make the first value as root. Push it to the stack.

3. Keep on popping while the stack is not empty and the next value is greater than stack’s top value. Make this value as the right child of the last popped node. Push the new node to the stack.

4. If the next value is less than the stack’s top value, make this value as the left child of the stack’s top node. Push the new node to the stack.

5. Repeat steps 2 and 3 until there are items remaining in pre[].

*************************************************************************************************************************

10. Find a pair with given sum in a Balanced BST --- simultaneously traverse inorder and reverse inorder and check for pair !!
-------O(n)
*************************************************************************************************************************

11.